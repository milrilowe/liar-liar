{"version":3,"file":"index.cjs","sources":["../../src/index.ts"],"sourcesContent":["import {\n  dehydrate as queryDehydrate,\n  hydrate as queryHydrate,\n} from '@tanstack/query-core'\nimport { isRedirect } from '@tanstack/router-core'\nimport type { AnyRouter } from '@tanstack/router-core'\nimport type {\n  QueryClient,\n  DehydratedState as QueryDehydratedState,\n} from '@tanstack/query-core'\n\nexport type RouterSsrQueryOptions<TRouter extends AnyRouter> = {\n  router: TRouter\n  queryClient: QueryClient\n\n  /**\n   * If `true`, the QueryClient will handle errors thrown by `redirect()` inside of mutations and queries.\n   *\n   * @default true\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/api/router/redirectFunction)\n   */\n  handleRedirects?: boolean\n}\n\ntype DehydratedRouterQueryState = {\n  dehydratedQueryClient?: QueryDehydratedState\n  queryStream: ReadableStream<QueryDehydratedState>\n}\n\nexport function setupCoreRouterSsrQueryIntegration<TRouter extends AnyRouter>({\n  router,\n  queryClient,\n  handleRedirects = true,\n}: RouterSsrQueryOptions<TRouter>) {\n  const ogHydrate = router.options.hydrate\n  const ogDehydrate = router.options.dehydrate\n\n  if (router.isServer) {\n    const sentQueries = new Set<string>()\n    const queryStream = createPushableStream()\n\n    router.options.dehydrate =\n      async (): Promise<DehydratedRouterQueryState> => {\n        router.serverSsr!.onRenderFinished(() => queryStream.close())\n        const ogDehydrated = await ogDehydrate?.()\n\n        const dehydratedRouter = {\n          ...ogDehydrated,\n          // prepare the stream for queries coming up during rendering\n          queryStream: queryStream.stream,\n        }\n\n        const dehydratedQueryClient = queryDehydrate(queryClient)\n        if (dehydratedQueryClient.queries.length > 0) {\n          dehydratedQueryClient.queries.forEach((query) => {\n            sentQueries.add(query.queryHash)\n          })\n          dehydratedRouter.dehydratedQueryClient = dehydratedQueryClient\n        }\n\n        return dehydratedRouter\n      }\n\n    const ogClientOptions = queryClient.getDefaultOptions()\n    queryClient.setDefaultOptions({\n      ...ogClientOptions,\n      dehydrate: {\n        shouldDehydrateQuery: () => true,\n        ...ogClientOptions.dehydrate,\n      },\n    })\n\n    queryClient.getQueryCache().subscribe((event) => {\n      // before rendering starts, we do not stream individual queries\n      // instead we dehydrate the entire query client in router's dehydrate()\n      // if attachRouterServerSsrUtils() has not been called yet, `router.serverSsr` will be undefined and we also do not stream\n      if (!router.serverSsr?.isDehydrated()) {\n        return\n      }\n      if (sentQueries.has(event.query.queryHash)) {\n        return\n      }\n      if (queryStream.isClosed()) {\n        console.warn(\n          `tried to stream query ${event.query.queryHash} after stream was already closed`,\n        )\n        return\n      }\n      // promise not yet set on the query, so we cannot stream it yet\n      if (!event.query.promise) {\n        return\n      }\n      sentQueries.add(event.query.queryHash)\n      queryStream.enqueue(\n        queryDehydrate(queryClient, {\n          shouldDehydrateQuery: (query) => {\n            if (query.queryHash === event.query.queryHash) {\n              return (\n                ogClientOptions.dehydrate?.shouldDehydrateQuery?.(query) ?? true\n              )\n            }\n            return false\n          },\n        }),\n      )\n    })\n    // on the client\n  } else {\n    router.options.hydrate = async (dehydrated: DehydratedRouterQueryState) => {\n      await ogHydrate?.(dehydrated)\n      // hydrate the query client with the dehydrated data (if it was dehydrated on the server)\n      if (dehydrated.dehydratedQueryClient) {\n        queryHydrate(queryClient, dehydrated.dehydratedQueryClient)\n      }\n\n      // read the query stream and hydrate the queries as they come in\n      const reader = dehydrated.queryStream.getReader()\n      reader\n        .read()\n        .then(async function handle({ done, value }) {\n          queryHydrate(queryClient, value)\n          if (done) {\n            return\n          }\n          const result = await reader.read()\n          return handle(result)\n        })\n        .catch((err) => {\n          console.error('Error reading query stream:', err)\n        })\n    }\n    if (handleRedirects) {\n      const ogMutationCacheConfig = queryClient.getMutationCache().config\n      queryClient.getMutationCache().config = {\n        ...ogMutationCacheConfig,\n        onError: (error, _variables, _context, _mutation) => {\n          if (isRedirect(error)) {\n            error.options._fromLocation = router.state.location\n            return router.navigate(router.resolveRedirect(error).options)\n          }\n\n          return ogMutationCacheConfig.onError?.(\n            error,\n            _variables,\n            _context,\n            _mutation,\n          )\n        },\n      }\n\n      const ogQueryCacheConfig = queryClient.getQueryCache().config\n      queryClient.getQueryCache().config = {\n        ...ogQueryCacheConfig,\n        onError: (error, _query) => {\n          if (isRedirect(error)) {\n            error.options._fromLocation = router.state.location\n            return router.navigate(router.resolveRedirect(error).options)\n          }\n\n          return ogQueryCacheConfig.onError?.(error, _query)\n        },\n      }\n    }\n  }\n}\n\ntype PushableStream = {\n  stream: ReadableStream\n  enqueue: (chunk: unknown) => void\n  close: () => void\n  isClosed: () => boolean\n  error: (err: unknown) => void\n}\n\nfunction createPushableStream(): PushableStream {\n  let controllerRef: ReadableStreamDefaultController\n  const stream = new ReadableStream({\n    start(controller) {\n      controllerRef = controller\n    },\n  })\n  let _isClosed = false\n\n  return {\n    stream,\n    enqueue: (chunk) => controllerRef.enqueue(chunk),\n    close: () => {\n      controllerRef.close()\n      _isClosed = true\n    },\n    isClosed: () => _isClosed,\n    error: (err: unknown) => controllerRef.error(err),\n  }\n}\n"],"names":["queryDehydrate","_a","queryHydrate","isRedirect"],"mappings":"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"}