{"version":3,"file":"plugin.cjs","sources":["../../src/plugin.ts"],"sourcesContent":["import path from 'node:path'\nimport { createNitro } from 'nitropack'\nimport { trimPathRight } from '@tanstack/router-core'\nimport { VIRTUAL_MODULES } from '@tanstack/start-server-core'\nimport { TanStackServerFnPluginEnv } from '@tanstack/server-functions-plugin'\nimport * as vite from 'vite'\nimport { crawlFrameworkPkgs } from 'vitefu'\nimport { createTanStackConfig } from './schema'\nimport { nitroPlugin } from './nitro-plugin/plugin'\nimport { startManifestPlugin } from './start-manifest-plugin/plugin'\nimport { startCompilerPlugin } from './start-compiler-plugin'\nimport {\n  CLIENT_DIST_DIR,\n  SSR_ENTRY_FILE,\n  VITE_ENVIRONMENT_NAMES,\n} from './constants'\nimport { tanStackStartRouter } from './start-router-plugin/plugin'\nimport { loadEnvPlugin } from './load-env-plugin/plugin'\nimport { devServerPlugin } from './dev-server-plugin/plugin'\nimport { resolveVirtualEntriesPlugin } from './resolve-virtual-entries-plugin/plugin'\nimport type { createTanStackStartOptionsSchema } from './schema'\nimport type { PluginOption, Rollup } from 'vite'\nimport type { z } from 'zod'\nimport type { CompileStartFrameworkOptions } from './compilers'\n\nexport type TanStackStartInputConfig = z.input<\n  ReturnType<typeof createTanStackStartOptionsSchema>\n>\n\nconst defaultConfig = createTanStackConfig()\nexport function getTanStackStartOptions(opts?: TanStackStartInputConfig) {\n  return defaultConfig.parse(opts)\n}\n\nexport type TanStackStartOutputConfig = ReturnType<\n  typeof getTanStackStartOptions\n>\n\nexport interface TanStackStartVitePluginCoreOptions {\n  framework: CompileStartFrameworkOptions\n  getVirtualServerRootHandler: (ctx: {\n    routerFilepath: string\n    serverEntryFilepath: string\n  }) => string\n  getVirtualServerEntry: (ctx: { routerFilepath: string }) => string\n  getVirtualClientEntry: (ctx: { routerFilepath: string }) => string\n  crawlPackages?: (opts: {\n    name: string\n    peerDependencies: Record<string, any>\n    exports?: Record<string, any> | string\n  }) => 'include' | 'exclude' | undefined\n}\n// this needs to live outside of the TanStackStartVitePluginCore since it will be invoked multiple times by vite\nlet ssrBundle: Rollup.OutputBundle\n\nexport function TanStackStartVitePluginCore(\n  opts: TanStackStartVitePluginCoreOptions,\n  startConfig: TanStackStartOutputConfig,\n): Array<PluginOption> {\n  return [\n    tanStackStartRouter({\n      ...startConfig.tsr,\n      target: opts.framework,\n      autoCodeSplitting: true,\n    }),\n    resolveVirtualEntriesPlugin(opts, startConfig),\n    {\n      name: 'tanstack-start-core:config-client',\n      async config(viteConfig, { command }) {\n        const viteAppBase = trimPathRight(viteConfig.base || '/')\n        globalThis.TSS_APP_BASE = viteAppBase\n\n        const nitroOutputPublicDir = await (async () => {\n          // Create a dummy nitro app to get the resolved public output path\n          const dummyNitroApp = await createNitro({\n            preset: startConfig.target,\n            compatibilityDate: '2024-12-01',\n          })\n\n          const nitroOutputPublicDir = dummyNitroApp.options.output.publicDir\n          await dummyNitroApp.close()\n\n          return nitroOutputPublicDir\n        })()\n\n        const startPackageName = `@tanstack/${opts.framework}-start`\n        const routerPackageName = `@tanstack/${opts.framework}-router`\n\n        const additionalOptimizeDeps = {\n          include: new Set<string>(),\n          exclude: new Set<string>(),\n        }\n\n        // crawl packages that have start in \"peerDependencies\"\n        // see https://github.com/svitejs/vitefu/blob/d8d82fa121e3b2215ba437107093c77bde51b63b/src/index.js#L95-L101\n\n        // this is currently uncached; could be implemented similarly as vite handles lock file changes\n        // see https://github.com/vitejs/vite/blob/557f797d29422027e8c451ca50dd84bf8c41b5f0/packages/vite/src/node/optimizer/index.ts#L1282\n\n        const result = await crawlFrameworkPkgs({\n          root: process.cwd(),\n          isBuild: command === 'build',\n          isFrameworkPkgByJson(pkgJson) {\n            if ([routerPackageName, startPackageName].includes(pkgJson.name)) {\n              return false\n            }\n\n            const peerDependencies = pkgJson['peerDependencies']\n\n            if (peerDependencies) {\n              const internalResult = opts.crawlPackages?.({\n                name: pkgJson.name,\n                peerDependencies,\n                exports: pkgJson.exports,\n              })\n              if (internalResult) {\n                if (internalResult === 'exclude') {\n                  additionalOptimizeDeps.exclude.add(pkgJson.name)\n                } else {\n                  additionalOptimizeDeps.include.add(pkgJson.name)\n                }\n              }\n              return (\n                startPackageName in peerDependencies ||\n                routerPackageName in peerDependencies\n              )\n            }\n            return false\n          },\n        })\n\n        return {\n          base: viteAppBase,\n          environments: {\n            [VITE_ENVIRONMENT_NAMES.client]: {\n              consumer: 'client',\n              build: {\n                manifest: true,\n                rollupOptions: {\n                  input: {\n                    main: getClientEntryPath(startConfig),\n                  },\n                  output: {\n                    dir: path.resolve(startConfig.root, CLIENT_DIST_DIR),\n                  },\n                  // TODO: this should be removed\n                  external: ['node:fs', 'node:path', 'node:os', 'node:crypto'],\n                },\n              },\n            },\n            [VITE_ENVIRONMENT_NAMES.server]: {\n              consumer: 'server',\n              build: {\n                ssr: true,\n                // we don't write to the file system as the below 'capture-output' plugin will\n                // capture the output and write it to the virtual file system\n                write: false,\n                copyPublicDir: false,\n                rollupOptions: {\n                  output: {\n                    entryFileNames: SSR_ENTRY_FILE,\n                  },\n                  plugins: [\n                    {\n                      name: 'capture-output',\n                      generateBundle(_options, bundle) {\n                        // TODO: can this hook be called more than once?\n                        ssrBundle = bundle\n                      },\n                    },\n                  ],\n                },\n                commonjsOptions: {\n                  include: [/node_modules/],\n                },\n              },\n            },\n          },\n          resolve: {\n            noExternal: [\n              '@tanstack/start**',\n              `@tanstack/${opts.framework}-start**`,\n              ...Object.values(VIRTUAL_MODULES),\n              startPackageName,\n              ...result.ssr.noExternal.sort(),\n            ],\n            external: [...result.ssr.external.sort()],\n            dedupe: [startPackageName],\n          },\n          optimizeDeps: {\n            exclude: [\n              ...Object.values(VIRTUAL_MODULES),\n              startPackageName,\n              ...result.optimizeDeps.exclude.sort(),\n              ...additionalOptimizeDeps.exclude,\n            ],\n            include: [...additionalOptimizeDeps.include],\n          },\n          /* prettier-ignore */\n          define: {\n            // define is an esbuild function that replaces the any instances of given keys with the given values\n            // i.e: __FRAMEWORK_NAME__ can be replaced with JSON.stringify(\"TanStack Start\")\n            // This is not the same as injecting environment variables.\n\n            ...defineReplaceEnv('TSS_SERVER_FN_BASE', startConfig.serverFns.base),\n            ...defineReplaceEnv('TSS_OUTPUT_PUBLIC_DIR', nitroOutputPublicDir),\n            ...defineReplaceEnv('TSS_APP_BASE', viteAppBase),\n            ...(command === 'serve' ? defineReplaceEnv('TSS_SHELL', startConfig.spa?.enabled ? 'true' : 'false') : {}),\n          },\n        }\n      },\n    },\n    // N.B. TanStackStartCompilerPlugin must be before the TanStackServerFnPluginEnv\n    startCompilerPlugin(opts.framework, {\n      client: { envName: VITE_ENVIRONMENT_NAMES.client },\n      server: { envName: VITE_ENVIRONMENT_NAMES.server },\n    }),\n    TanStackServerFnPluginEnv({\n      // This is the ID that will be available to look up and import\n      // our server function manifest and resolve its module\n      manifestVirtualImportId: VIRTUAL_MODULES.serverFnManifest,\n      client: {\n        getRuntimeCode: () =>\n          `import { createClientRpc } from '@tanstack/${opts.framework}-start/server-functions-client'`,\n        replacer: (d) =>\n          `createClientRpc('${d.functionId}', '${startConfig.serverFns.base}')`,\n        envName: VITE_ENVIRONMENT_NAMES.client,\n      },\n      server: {\n        getRuntimeCode: () =>\n          `import { createServerRpc } from '@tanstack/${opts.framework}-start/server-functions-server'`,\n        replacer: (d) =>\n          `createServerRpc('${d.functionId}', '${startConfig.serverFns.base}', ${d.fn})`,\n        envName: VITE_ENVIRONMENT_NAMES.server,\n      },\n    }),\n    loadEnvPlugin(startConfig),\n    startManifestPlugin({ clientEntry: getClientEntryPath(startConfig) }),\n    devServerPlugin(),\n    nitroPlugin(startConfig, () => ssrBundle),\n    {\n      name: 'tanstack-start:core:capture-client-bundle',\n      applyToEnvironment(e) {\n        return e.name === VITE_ENVIRONMENT_NAMES.client\n      },\n      enforce: 'post',\n      generateBundle(_options, bundle) {\n        globalThis.TSS_CLIENT_BUNDLE = bundle\n      },\n    },\n  ]\n}\n\nfunction defineReplaceEnv<TKey extends string, TValue extends string>(\n  key: TKey,\n  value: TValue,\n): { [P in `process.env.${TKey}` | `import.meta.env.${TKey}`]: TValue } {\n  return {\n    [`process.env.${key}`]: JSON.stringify(value),\n    [`import.meta.env.${key}`]: JSON.stringify(value),\n  } as { [P in `process.env.${TKey}` | `import.meta.env.${TKey}`]: TValue }\n}\n\nconst getClientEntryPath = (startConfig: TanStackStartOutputConfig) => {\n  // when the user specifies a custom client entry path, we need to resolve it\n  // relative to the root of the project, keeping in mind that if not specified\n  // it will be /~start/default-client-entry which is a virtual path\n  // that is resolved by vite to the actual client entry path\n  const entry = startConfig.clientEntryPath.startsWith(\n    '/~start/default-client-entry',\n  )\n    ? startConfig.clientEntryPath\n    : vite.normalizePath(\n        path.join(\n          '/@fs',\n          path.resolve(startConfig.root, startConfig.clientEntryPath),\n        ),\n      )\n\n  return entry\n}\n"],"names":["createTanStackConfig","tanStackStartRouter","resolveVirtualEntriesPlugin","trimPathRight","createNitro","nitroOutputPublicDir","crawlFrameworkPkgs","_a","VITE_ENVIRONMENT_NAMES","CLIENT_DIST_DIR","SSR_ENTRY_FILE","VIRTUAL_MODULES","startCompilerPlugin","TanStackServerFnPluginEnv","loadEnvPlugin","startManifestPlugin","devServerPlugin","nitroPlugin","vite"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BsBA,OAAqB,qBAAA;AAwB3C,IAAI;AAEY,SAAA,4BACd,MACA,aACqB;AACd,SAAA;AAAA,IACLC,2BAAoB;AAAA,MAClB,GAAG,YAAY;AAAA,MACf,QAAQ,KAAK;AAAA,MACb,mBAAmB;AAAA,IAAA,CACpB;AAAA,IACDC,SAAA,4BAA4B,MAAM,WAAW;AAAA,IAC7C;AAAA,MACE,MAAM;AAAA,MACN,MAAM,OAAO,YAAY,EAAE,WAAW;;AACpC,cAAM,cAAcC,WAAA,cAAc,WAAW,QAAQ,GAAG;AACxD,mBAAW,eAAe;AAEpB,cAAA,uBAAuB,OAAO,YAAY;AAExC,gBAAA,gBAAgB,MAAMC,sBAAY;AAAA,YACtC,QAAQ,YAAY;AAAA,YACpB,mBAAmB;AAAA,UAAA,CACpB;AAEKC,gBAAAA,wBAAuB,cAAc,QAAQ,OAAO;AAC1D,gBAAM,cAAc,MAAM;AAEnBA,iBAAAA;AAAAA,QAAAA,GACN;AAEG,cAAA,mBAAmB,aAAa,KAAK,SAAS;AAC9C,cAAA,oBAAoB,aAAa,KAAK,SAAS;AAErD,cAAM,yBAAyB;AAAA,UAC7B,6BAAa,IAAY;AAAA,UACzB,6BAAa,IAAY;AAAA,QAC3B;AAQM,cAAA,SAAS,MAAMC,0BAAmB;AAAA,UACtC,MAAM,QAAQ,IAAI;AAAA,UAClB,SAAS,YAAY;AAAA,UACrB,qBAAqB,SAAS;;AAC5B,gBAAI,CAAC,mBAAmB,gBAAgB,EAAE,SAAS,QAAQ,IAAI,GAAG;AACzD,qBAAA;AAAA,YAAA;AAGH,kBAAA,mBAAmB,QAAQ,kBAAkB;AAEnD,gBAAI,kBAAkB;AACd,oBAAA,kBAAiBC,MAAA,KAAK,kBAAL,gBAAAA,IAAA,WAAqB;AAAA,gBAC1C,MAAM,QAAQ;AAAA,gBACd;AAAA,gBACA,SAAS,QAAQ;AAAA,cAAA;AAEnB,kBAAI,gBAAgB;AAClB,oBAAI,mBAAmB,WAAW;AACT,yCAAA,QAAQ,IAAI,QAAQ,IAAI;AAAA,gBAAA,OAC1C;AACkB,yCAAA,QAAQ,IAAI,QAAQ,IAAI;AAAA,gBAAA;AAAA,cACjD;AAGA,qBAAA,oBAAoB,oBACpB,qBAAqB;AAAA,YAAA;AAGlB,mBAAA;AAAA,UAAA;AAAA,QACT,CACD;AAEM,eAAA;AAAA,UACL,MAAM;AAAA,UACN,cAAc;AAAA,YACZ,CAACC,UAAAA,uBAAuB,MAAM,GAAG;AAAA,cAC/B,UAAU;AAAA,cACV,OAAO;AAAA,gBACL,UAAU;AAAA,gBACV,eAAe;AAAA,kBACb,OAAO;AAAA,oBACL,MAAM,mBAAmB,WAAW;AAAA,kBACtC;AAAA,kBACA,QAAQ;AAAA,oBACN,KAAK,KAAK,QAAQ,YAAY,MAAMC,UAAe,eAAA;AAAA,kBACrD;AAAA;AAAA,kBAEA,UAAU,CAAC,WAAW,aAAa,WAAW,aAAa;AAAA,gBAAA;AAAA,cAC7D;AAAA,YAEJ;AAAA,YACA,CAACD,UAAAA,uBAAuB,MAAM,GAAG;AAAA,cAC/B,UAAU;AAAA,cACV,OAAO;AAAA,gBACL,KAAK;AAAA;AAAA;AAAA,gBAGL,OAAO;AAAA,gBACP,eAAe;AAAA,gBACf,eAAe;AAAA,kBACb,QAAQ;AAAA,oBACN,gBAAgBE,UAAAA;AAAAA,kBAClB;AAAA,kBACA,SAAS;AAAA,oBACP;AAAA,sBACE,MAAM;AAAA,sBACN,eAAe,UAAU,QAAQ;AAEnB,oCAAA;AAAA,sBAAA;AAAA,oBACd;AAAA,kBACF;AAAA,gBAEJ;AAAA,gBACA,iBAAiB;AAAA,kBACf,SAAS,CAAC,cAAc;AAAA,gBAAA;AAAA,cAC1B;AAAA,YACF;AAAA,UAEJ;AAAA,UACA,SAAS;AAAA,YACP,YAAY;AAAA,cACV;AAAA,cACA,aAAa,KAAK,SAAS;AAAA,cAC3B,GAAG,OAAO,OAAOC,+BAAe;AAAA,cAChC;AAAA,cACA,GAAG,OAAO,IAAI,WAAW,KAAK;AAAA,YAChC;AAAA,YACA,UAAU,CAAC,GAAG,OAAO,IAAI,SAAS,MAAM;AAAA,YACxC,QAAQ,CAAC,gBAAgB;AAAA,UAC3B;AAAA,UACA,cAAc;AAAA,YACZ,SAAS;AAAA,cACP,GAAG,OAAO,OAAOA,+BAAe;AAAA,cAChC;AAAA,cACA,GAAG,OAAO,aAAa,QAAQ,KAAK;AAAA,cACpC,GAAG,uBAAuB;AAAA,YAC5B;AAAA,YACA,SAAS,CAAC,GAAG,uBAAuB,OAAO;AAAA,UAC7C;AAAA;AAAA,UAEA,QAAQ;AAAA;AAAA;AAAA;AAAA,YAKN,GAAG,iBAAiB,sBAAsB,YAAY,UAAU,IAAI;AAAA,YACpE,GAAG,iBAAiB,yBAAyB,oBAAoB;AAAA,YACjE,GAAG,iBAAiB,gBAAgB,WAAW;AAAA,YAC/C,GAAI,YAAY,UAAU,iBAAiB,eAAa,iBAAY,QAAZ,mBAAiB,WAAU,SAAS,OAAO,IAAI,CAAA;AAAA,UAAC;AAAA,QAE5G;AAAA,MAAA;AAAA,IAEJ;AAAA;AAAA,IAEAC,oBAAA,oBAAoB,KAAK,WAAW;AAAA,MAClC,QAAQ,EAAE,SAASJ,UAAA,uBAAuB,OAAO;AAAA,MACjD,QAAQ,EAAE,SAASA,UAAAA,uBAAuB,OAAO;AAAA,IAAA,CAClD;AAAA,IACDK,gDAA0B;AAAA;AAAA;AAAA,MAGxB,yBAAyBF,gBAAgB,gBAAA;AAAA,MACzC,QAAQ;AAAA,QACN,gBAAgB,MACd,8CAA8C,KAAK,SAAS;AAAA,QAC9D,UAAU,CAAC,MACT,oBAAoB,EAAE,UAAU,OAAO,YAAY,UAAU,IAAI;AAAA,QACnE,SAASH,UAAAA,uBAAuB;AAAA,MAClC;AAAA,MACA,QAAQ;AAAA,QACN,gBAAgB,MACd,8CAA8C,KAAK,SAAS;AAAA,QAC9D,UAAU,CAAC,MACT,oBAAoB,EAAE,UAAU,OAAO,YAAY,UAAU,IAAI,MAAM,EAAE,EAAE;AAAA,QAC7E,SAASA,UAAAA,uBAAuB;AAAA,MAAA;AAAA,IAClC,CACD;AAAA,IACDM,SAAAA,cAAc,WAAW;AAAA,IACzBC,SAAAA,oBAAoB,EAAE,aAAa,mBAAmB,WAAW,GAAG;AAAA,IACpEC,yBAAgB;AAAA,IAChBC,qBAAY,aAAa,MAAM,SAAS;AAAA,IACxC;AAAA,MACE,MAAM;AAAA,MACN,mBAAmB,GAAG;AACb,eAAA,EAAE,SAAST,UAAAA,uBAAuB;AAAA,MAC3C;AAAA,MACA,SAAS;AAAA,MACT,eAAe,UAAU,QAAQ;AAC/B,mBAAW,oBAAoB;AAAA,MAAA;AAAA,IACjC;AAAA,EAEJ;AACF;AAEA,SAAS,iBACP,KACA,OACsE;AAC/D,SAAA;AAAA,IACL,CAAC,eAAe,GAAG,EAAE,GAAG,KAAK,UAAU,KAAK;AAAA,IAC5C,CAAC,mBAAmB,GAAG,EAAE,GAAG,KAAK,UAAU,KAAK;AAAA,EAClD;AACF;AAEA,MAAM,qBAAqB,CAAC,gBAA2C;AAK/D,QAAA,QAAQ,YAAY,gBAAgB;AAAA,IACxC;AAAA,EAAA,IAEE,YAAY,kBACZU,gBAAK;AAAA,IACH,KAAK;AAAA,MACH;AAAA,MACA,KAAK,QAAQ,YAAY,MAAM,YAAY,eAAe;AAAA,IAAA;AAAA,EAE9D;AAEG,SAAA;AACT;;"}