{"version":3,"file":"plugin.cjs","sources":["../../../src/dev-server-plugin/plugin.ts"],"sourcesContent":["import { createEvent, getHeader, sendWebResponse } from 'h3'\nimport { isRunnableDevEnvironment } from 'vite'\nimport { VITE_ENVIRONMENT_NAMES } from '../constants'\nimport { extractHtmlScripts } from './extract-html-scripts'\nimport type { Connect, DevEnvironment, Plugin } from 'vite'\n\n/* eslint-disable no-var */\ndeclare global {\n  var TSS_INJECTED_HEAD_SCRIPTS: string | undefined\n}\n\nexport function devServerPlugin(): Plugin {\n  // let config: UserConfig\n  let isTest = false\n\n  return {\n    name: 'start-dev-ssr-plugin',\n    config(userConfig, { mode }) {\n      // config = userConfig\n      isTest = isTest ? isTest : mode === 'test'\n      // see https://vite.dev/config/shared-options.html#apptype\n      // this will prevent vite from injecting middlewares that we don't want\n      userConfig.appType = 'custom'\n    },\n    async configureServer(viteDevServer) {\n      if (isTest) {\n        return\n      }\n\n      // Extract the scripts that Vite plugins would inject into the initial HTML\n      const templateHtml = `<html><head></head><body></body></html>`\n      const transformedHtml = await viteDevServer.transformIndexHtml(\n        '/',\n        templateHtml,\n      )\n      const scripts = extractHtmlScripts(transformedHtml)\n      globalThis.TSS_INJECTED_HEAD_SCRIPTS = scripts\n        .map((script) => script.content ?? '')\n        .join(';')\n\n      return () => {\n        // do not install middleware in middlewareMode\n        if (viteDevServer.config.server.middlewareMode) {\n          return\n        }\n        viteDevServer.middlewares.use(async (req, res, next) => {\n          // Create an H3Event to have it passed into the server entry\n          // i.e: event => defineEventHandler(event)\n\n          // fix the request URL to match the original URL\n          // otherwise, the request URL will '/index.html'\n          if (req.originalUrl) {\n            req.url = req.originalUrl\n          }\n          const event = createEvent(req, res)\n\n          const serverEnv = viteDevServer.environments[\n            VITE_ENVIRONMENT_NAMES.server\n          ] as DevEnvironment | undefined\n\n          try {\n            if (!serverEnv) {\n              throw new Error(\n                `Server environment ${VITE_ENVIRONMENT_NAMES.server} not found`,\n              )\n            }\n\n            if (!isRunnableDevEnvironment(serverEnv)) {\n              return next()\n            }\n\n            // Import and resolve the request by running the server entry point\n            // i.e export default defineEventHandler((event) => { ... })\n            const serverEntry = await serverEnv.runner.import(\n              '/~start/server-entry',\n            )\n            const response = await serverEntry['default'](event)\n\n            return sendWebResponse(event, response)\n          } catch (e) {\n            console.error(e)\n            viteDevServer.ssrFixStacktrace(e as Error)\n\n            if (\n              getHeader(event, 'content-type')?.includes('application/json')\n            ) {\n              return sendWebResponse(\n                event,\n                new Response(\n                  JSON.stringify(\n                    {\n                      status: 500,\n                      error: 'Internal Server Error',\n                      message:\n                        'An unexpected error occurred. Please try again later.',\n                      timestamp: new Date().toISOString(),\n                    },\n                    null,\n                    2,\n                  ),\n                  {\n                    status: 500,\n                    headers: {\n                      'Content-Type': 'application/json',\n                    },\n                  },\n                ),\n              )\n            }\n\n            return sendWebResponse(\n              event,\n              new Response(\n                `\n              <!DOCTYPE html>\n              <html lang=\"en\">\n                <head>\n                  <meta charset=\"UTF-8\" />\n                  <title>Error</title>\n                  <script type=\"module\">\n                    import { ErrorOverlay } from '/@vite/client'\n                    document.body.appendChild(new ErrorOverlay(${JSON.stringify(\n                      prepareError(req, e),\n                    ).replace(/</g, '\\\\u003c')}))\n                  </script>\n                </head>\n                <body>\n                </body>\n              </html>\n            `,\n                {\n                  status: 500,\n                  headers: {\n                    'Content-Type': 'text/html',\n                  },\n                },\n              ),\n            )\n          }\n        })\n      }\n    },\n  }\n}\n\n/**\n * Formats error for SSR message in error overlay\n * @param req\n * @param error\n * @returns\n */\nfunction prepareError(req: Connect.IncomingMessage, error: unknown) {\n  const e = error as Error\n  return {\n    message: `An error occured while server rendering ${req.url}:\\n\\n\\t${\n      typeof e === 'string' ? e : e.message\n    } `,\n    stack: typeof e === 'string' ? '' : e.stack,\n  }\n}\n"],"names":["extractHtmlScripts","createEvent","VITE_ENVIRONMENT_NAMES","isRunnableDevEnvironment","sendWebResponse","getHeader"],"mappings":";;;;;;AAWO,SAAS,kBAA0B;AAExC,MAAI,SAAS;AAEN,SAAA;AAAA,IACL,MAAM;AAAA,IACN,OAAO,YAAY,EAAE,QAAQ;AAElB,eAAA,SAAS,SAAS,SAAS;AAGpC,iBAAW,UAAU;AAAA,IACvB;AAAA,IACA,MAAM,gBAAgB,eAAe;AACnC,UAAI,QAAQ;AACV;AAAA,MAAA;AAIF,YAAM,eAAe;AACf,YAAA,kBAAkB,MAAM,cAAc;AAAA,QAC1C;AAAA,QACA;AAAA,MACF;AACM,YAAA,UAAUA,sCAAmB,eAAe;AACvC,iBAAA,4BAA4B,QACpC,IAAI,CAAC,WAAW,OAAO,WAAW,EAAE,EACpC,KAAK,GAAG;AAEX,aAAO,MAAM;AAEP,YAAA,cAAc,OAAO,OAAO,gBAAgB;AAC9C;AAAA,QAAA;AAEF,sBAAc,YAAY,IAAI,OAAO,KAAK,KAAK,SAAS;;AAMtD,cAAI,IAAI,aAAa;AACnB,gBAAI,MAAM,IAAI;AAAA,UAAA;AAEV,gBAAA,QAAQC,GAAAA,YAAY,KAAK,GAAG;AAElC,gBAAM,YAAY,cAAc,aAC9BC,UAAAA,uBAAuB,MACzB;AAEI,cAAA;AACF,gBAAI,CAAC,WAAW;AACd,oBAAM,IAAI;AAAA,gBACR,sBAAsBA,iCAAuB,MAAM;AAAA,cACrD;AAAA,YAAA;AAGE,gBAAA,CAACC,KAAAA,yBAAyB,SAAS,GAAG;AACxC,qBAAO,KAAK;AAAA,YAAA;AAKR,kBAAA,cAAc,MAAM,UAAU,OAAO;AAAA,cACzC;AAAA,YACF;AACA,kBAAM,WAAW,MAAM,YAAY,SAAS,EAAE,KAAK;AAE5C,mBAAAC,GAAA,gBAAgB,OAAO,QAAQ;AAAA,mBAC/B,GAAG;AACV,oBAAQ,MAAM,CAAC;AACf,0BAAc,iBAAiB,CAAU;AAEzC,iBACEC,QAAAA,UAAU,OAAO,cAAc,MAA/BA,mBAAkC,SAAS,qBAC3C;AACO,qBAAAD,GAAA;AAAA,gBACL;AAAA,gBACA,IAAI;AAAA,kBACF,KAAK;AAAA,oBACH;AAAA,sBACE,QAAQ;AAAA,sBACR,OAAO;AAAA,sBACP,SACE;AAAA,sBACF,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,oBACpC;AAAA,oBACA;AAAA,oBACA;AAAA,kBACF;AAAA,kBACA;AAAA,oBACE,QAAQ;AAAA,oBACR,SAAS;AAAA,sBACP,gBAAgB;AAAA,oBAAA;AAAA,kBAClB;AAAA,gBACF;AAAA,cAEJ;AAAA,YAAA;AAGK,mBAAAA,GAAA;AAAA,cACL;AAAA,cACA,IAAI;AAAA,gBACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAQiD,KAAK;AAAA,kBAChD,aAAa,KAAK,CAAC;AAAA,gBAAA,EACnB,QAAQ,MAAM,SAAS,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAO9B;AAAA,kBACE,QAAQ;AAAA,kBACR,SAAS;AAAA,oBACP,gBAAgB;AAAA,kBAAA;AAAA,gBAClB;AAAA,cACF;AAAA,YAEJ;AAAA,UAAA;AAAA,QACF,CACD;AAAA,MACH;AAAA,IAAA;AAAA,EAEJ;AACF;AAQA,SAAS,aAAa,KAA8B,OAAgB;AAClE,QAAM,IAAI;AACH,SAAA;AAAA,IACL,SAAS,2CAA2C,IAAI,GAAG;AAAA;AAAA,GACzD,OAAO,MAAM,WAAW,IAAI,EAAE,OAChC;AAAA,IACA,OAAO,OAAO,MAAM,WAAW,KAAK,EAAE;AAAA,EACxC;AACF;;"}